namespace MaintenanceTracker;

using System.Text.Json;
using System.IO;

class Program
{
    //create a list of maintenances tasks objects for referencing and later writing to file.
    static List<MaintenanceTask> tasks = new List<MaintenanceTask>();
    static List<Expense> expenses = new List<Expense>();
    //Create a counter to keep up with the number of tasks
    static int taskCounter = 1;

    static string taskFilePath = "tasks.json";
    static string expenseFilePath = "expenses.json";
    static void Main(string[] args)
    {
    TaskManager.Tasks = FileManager.LoadFromFile<MaintenanceTask>("tasks.json");
    TaskManager.TaskCounter = TaskManager.Tasks.Count + 1;

    ExpenseManager.Expenses = FileManager.LoadFromFile<Expense>("expenses.json");
    
    Menu.ShowMainMenu(); 

    }
    public static void LogTask(string taskFilePath){
        //clear the screen to make it cleaner for the user to see the menu

        Console.Clear();
        //give the new screen a title
        Console.WriteLine("-- Log a New Maintenance Task --");
        //get user input for the task description
        Console.Write("Enter task description: ");
        string description = Console.ReadLine();
        //get the user input for the due date
        Console.Write("Enter due date (yyyy-mm-dd): ");
        string taskDate = Console.ReadLine();

        Console.Write("Is this a recurring task? (y/n): ");
        string recurringInput = Console.ReadLine().ToLower();
        bool isRecurring = recurringInput == "y";
        int recurrenceDays = 0;

        if (isRecurring)
        {
            Console.Write("How many days between each recurrence (e.g., 90): ");
            string daysInput = Console.ReadLine();
            while (!int.TryParse(daysInput, out recurrenceDays) || recurrenceDays <= 0)
            {
                Console.Write("Invalid number. Please enter a positive number of days: ");
                daysInput = Console.ReadLine();
            }
        }

        //tricky learning date time class.  gave it a shot
        // create a duedate variable to hold the user date input of type datetime.
        //
        DateTime dueDate;
        //I want to make sure the user gives me a good date in the correct format
        //until the user does, it will coninue to ask
        while (!DateTime.TryParse(taskDate, out dueDate)){
                Console.Write("Invalid date. Please enter again (yyyy-mm-dd): ");
                taskDate = Console.ReadLine();
            }

        //now that i have a due date, i can create a maintenancetask object to store in my list
       // MaintenanceTask newTask = new MaintenanceTask();  just took this out //
        /* Id = taskCounter++,
            Description = description,
            DueDate = dueDate
            };
        */
        /*newTask.Id = taskCounter++;
        newTask.Description = description;
        newTask.DueDate = dueDate;
        newTask.IsRecurring = isRecurring;
        newTask.RecurrenceDays = recurrenceDays;
        */
        
        //new stuff here.
        var newTask = new MaintenanceTask
        {

            Id = TaskManager.TaskCounter++,
            Description = description,
            DueDate = dueDate,
            IsRecurring = isRecurring,
            RecurrenceDays = recurrenceDays
        };

        TaskManager.Tasks.Add(newTask);
        FileManager.SaveToFile(taskFilePath, TaskManager.Tasks);

        //add the new object to my tasks list
        //tasks.Add(newTask);
        //SaveTasksToFile();
        Console.WriteLine("Task logged successfully!");
        Console.WriteLine("Press Enter to continue...");
        Console.ReadLine();

    }

    public static void MarkTaskComplete(){
        Console.WriteLine("\n-- Mark Task Complete --");
        Console.WriteLine("\n--NOT IMPLEMENTED YET --");
        Console.WriteLine("Press Enter to return to the main menu.");
        Console.ReadLine();
       
    }

    //print to screen the list of dates stored in my tasks list
    public static void ViewUpcomingTasks(){
        /*
        Console.WriteLine("\n-- Log a Task --");
        Console.WriteLine("\n--NOT IMPLEMENTED YET --");
        Console.WriteLine("Press Enter to return to the main menu.");
        Console.ReadLine();
        */

        TaskManager.ViewUpcomingTasks();
        

       
    }

    /*
    static void LogExpense(){
        Console.WriteLine("\n-- Log a Task --");
        Console.WriteLine("\n--NOT IMPLEMENTED YET --");
        Console.WriteLine("Press Enter to return to the main menu.");
        Console.ReadLine();
       
    }*/
    public static void LogExpense()
    {
        Console.Clear();
        Console.WriteLine("-- Log an Expense --");

        if (TaskManager.Tasks.Count == 0){
            Console.WriteLine("There are no tasks to log this expense to.");
            Console.WriteLine("Press Enter to return to the main menu.");
            Console.ReadLine();
            return;
        }

        // Show tasks to pick from
        Console.WriteLine("Select the task to associate the expense with:");
        foreach (var task in TaskManager.Tasks){
            Console.WriteLine($"ID: {task.Id} | {task.Description}");
        }

        Console.Write("Enter the task ID: ");
        string input = Console.ReadLine();
        int taskId;

        while (!int.TryParse(input, out taskId) || !TaskManager.Tasks.Any(t => t.Id == taskId)){
        Console.Write("Invalid task ID. Try again: ");
        input = Console.ReadLine();
        }

        Console.Write("Enter expense amount (e.g., 125.50): ");
        string amountInput = Console.ReadLine();
        decimal amount;
    
        while (!decimal.TryParse(amountInput, out amount)){
            Console.Write("Invalid amount. Try again: ");
            amountInput = Console.ReadLine();
        }

        Console.Write("Enter a note for this expense: ");
        string notes = Console.ReadLine();

        /*Expense newExpense = new Expense{
        TaskId = taskId,
        Amount = amount,
        Date = DateTime.Now,
        Notes = notes
        };
        */

        var newExpense = new Expense
        {
            TaskId = taskId,
            Amount = amount,
            Date = DateTime.Now,
            Notes = notes
        };

        ExpenseManager.Expenses.Add(newExpense);
        FileManager.SaveToFile("expenses.json", ExpenseManager.Expenses);
        Console.WriteLine("Expense logged successfully!");
        Console.WriteLine("Press Enter to return to the main menu.");
        Console.ReadLine();

    } 
    public static void  View_Reports(){
        Console.WriteLine("\n-- Log a Task --");
        Console.WriteLine("\n--NOT IMPLEMENTED YET --");
        Console.WriteLine("Press Enter to return to the main menu.");
        Console.ReadLine();
    }

    public static void SaveTasksToFile(){
        FileManager.SaveToFile(taskFilePath, tasks);
    }

    public static void SaveExpensesToFile(){
        FileManager.SaveToFile(expenseFilePath, expenses);
    }

    public static void LoadTasksFromFile(){
        tasks = FileManager.LoadFromFile<MaintenanceTask>(taskFilePath);
    }

    public static void LoadExpensesFromFile(){
        expenses = FileManager.LoadFromFile<Expense>(expenseFilePath);
    }

}
